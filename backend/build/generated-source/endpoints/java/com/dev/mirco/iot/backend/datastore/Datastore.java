/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2018-02-26 17:53:51 UTC)
 * on 2018-03-11 at 15:49:47 UTC 
 * Modify at your own risk.
 */

package com.dev.mirco.iot.backend.datastore;

/**
 * Service definition for Datastore (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link DatastoreRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Datastore extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.23.0 of the datastore library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "datastore/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Datastore(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Datastore(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the DatastoreEndpoint collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Datastore datastore = new Datastore(...);}
   *   {@code Datastore.DatastoreEndpoint.List request = datastore.datastoreEndpoint().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public DatastoreEndpoint datastoreEndpoint() {
    return new DatastoreEndpoint();
  }

  /**
   * The "datastoreEndpoint" collection of methods.
   */
  public class DatastoreEndpoint {

    /**
     * Create a request for the method "datastoreEndpoint.getResource".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link GetResource#execute()} method to invoke the remote operation.
     *
     * @param uri
     * @return the request
     */
    public GetResource getResource(java.lang.String uri) throws java.io.IOException {
      GetResource result = new GetResource(uri);
      initialize(result);
      return result;
    }

    public class GetResource extends DatastoreRequest<com.dev.mirco.iot.backend.datastore.model.CloudResource> {

      private static final String REST_PATH = "cloudresource/{uri}";

      /**
       * Create a request for the method "datastoreEndpoint.getResource".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link GetResource#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetResource#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param uri
       * @since 1.13
       */
      protected GetResource(java.lang.String uri) {
        super(Datastore.this, "GET", REST_PATH, null, com.dev.mirco.iot.backend.datastore.model.CloudResource.class);
        this.uri = com.google.api.client.util.Preconditions.checkNotNull(uri, "Required parameter uri must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetResource setAlt(java.lang.String alt) {
        return (GetResource) super.setAlt(alt);
      }

      @Override
      public GetResource setFields(java.lang.String fields) {
        return (GetResource) super.setFields(fields);
      }

      @Override
      public GetResource setKey(java.lang.String key) {
        return (GetResource) super.setKey(key);
      }

      @Override
      public GetResource setOauthToken(java.lang.String oauthToken) {
        return (GetResource) super.setOauthToken(oauthToken);
      }

      @Override
      public GetResource setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetResource) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetResource setQuotaUser(java.lang.String quotaUser) {
        return (GetResource) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetResource setUserIp(java.lang.String userIp) {
        return (GetResource) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String uri;

      /**

       */
      public java.lang.String getUri() {
        return uri;
      }

      public GetResource setUri(java.lang.String uri) {
        this.uri = uri;
        return this;
      }

      @Override
      public GetResource set(String parameterName, Object value) {
        return (GetResource) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "datastoreEndpoint.getScenario".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link GetScenario#execute()} method to invoke the remote operation.
     *
     * @param scenario
     * @return the request
     */
    public GetScenario getScenario(java.lang.String scenario) throws java.io.IOException {
      GetScenario result = new GetScenario(scenario);
      initialize(result);
      return result;
    }

    public class GetScenario extends DatastoreRequest<com.dev.mirco.iot.backend.datastore.model.CloudScenario> {

      private static final String REST_PATH = "cloudscenario/{scenario}";

      /**
       * Create a request for the method "datastoreEndpoint.getScenario".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link GetScenario#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetScenario#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param scenario
       * @since 1.13
       */
      protected GetScenario(java.lang.String scenario) {
        super(Datastore.this, "GET", REST_PATH, null, com.dev.mirco.iot.backend.datastore.model.CloudScenario.class);
        this.scenario = com.google.api.client.util.Preconditions.checkNotNull(scenario, "Required parameter scenario must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetScenario setAlt(java.lang.String alt) {
        return (GetScenario) super.setAlt(alt);
      }

      @Override
      public GetScenario setFields(java.lang.String fields) {
        return (GetScenario) super.setFields(fields);
      }

      @Override
      public GetScenario setKey(java.lang.String key) {
        return (GetScenario) super.setKey(key);
      }

      @Override
      public GetScenario setOauthToken(java.lang.String oauthToken) {
        return (GetScenario) super.setOauthToken(oauthToken);
      }

      @Override
      public GetScenario setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetScenario) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetScenario setQuotaUser(java.lang.String quotaUser) {
        return (GetScenario) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetScenario setUserIp(java.lang.String userIp) {
        return (GetScenario) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String scenario;

      /**

       */
      public java.lang.String getScenario() {
        return scenario;
      }

      public GetScenario setScenario(java.lang.String scenario) {
        this.scenario = scenario;
        return this;
      }

      @Override
      public GetScenario set(String parameterName, Object value) {
        return (GetScenario) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "datastoreEndpoint.getServer".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link GetServer#execute()} method to invoke the remote operation.
     *
     * @param uri
     * @return the request
     */
    public GetServer getServer(java.lang.String uri) throws java.io.IOException {
      GetServer result = new GetServer(uri);
      initialize(result);
      return result;
    }

    public class GetServer extends DatastoreRequest<com.dev.mirco.iot.backend.datastore.model.CloudServer> {

      private static final String REST_PATH = "cloudserver/{uri}";

      /**
       * Create a request for the method "datastoreEndpoint.getServer".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link GetServer#execute()} method to invoke the remote
       * operation. <p> {@link
       * GetServer#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param uri
       * @since 1.13
       */
      protected GetServer(java.lang.String uri) {
        super(Datastore.this, "GET", REST_PATH, null, com.dev.mirco.iot.backend.datastore.model.CloudServer.class);
        this.uri = com.google.api.client.util.Preconditions.checkNotNull(uri, "Required parameter uri must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public GetServer setAlt(java.lang.String alt) {
        return (GetServer) super.setAlt(alt);
      }

      @Override
      public GetServer setFields(java.lang.String fields) {
        return (GetServer) super.setFields(fields);
      }

      @Override
      public GetServer setKey(java.lang.String key) {
        return (GetServer) super.setKey(key);
      }

      @Override
      public GetServer setOauthToken(java.lang.String oauthToken) {
        return (GetServer) super.setOauthToken(oauthToken);
      }

      @Override
      public GetServer setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (GetServer) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public GetServer setQuotaUser(java.lang.String quotaUser) {
        return (GetServer) super.setQuotaUser(quotaUser);
      }

      @Override
      public GetServer setUserIp(java.lang.String userIp) {
        return (GetServer) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String uri;

      /**

       */
      public java.lang.String getUri() {
        return uri;
      }

      public GetServer setUri(java.lang.String uri) {
        this.uri = uri;
        return this;
      }

      @Override
      public GetServer set(String parameterName, Object value) {
        return (GetServer) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "datastoreEndpoint.handleDELETE".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link HandleDELETE#execute()} method to invoke the remote operation.
     *
     * @param uri
     * @return the request
     */
    public HandleDELETE handleDELETE(java.lang.String uri) throws java.io.IOException {
      HandleDELETE result = new HandleDELETE(uri);
      initialize(result);
      return result;
    }

    public class HandleDELETE extends DatastoreRequest<Void> {

      private static final String REST_PATH = "handleDELETE/{uri}";

      /**
       * Create a request for the method "datastoreEndpoint.handleDELETE".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link HandleDELETE#execute()} method to invoke the remote
       * operation. <p> {@link
       * HandleDELETE#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param uri
       * @since 1.13
       */
      protected HandleDELETE(java.lang.String uri) {
        super(Datastore.this, "POST", REST_PATH, null, Void.class);
        this.uri = com.google.api.client.util.Preconditions.checkNotNull(uri, "Required parameter uri must be specified.");
      }

      @Override
      public HandleDELETE setAlt(java.lang.String alt) {
        return (HandleDELETE) super.setAlt(alt);
      }

      @Override
      public HandleDELETE setFields(java.lang.String fields) {
        return (HandleDELETE) super.setFields(fields);
      }

      @Override
      public HandleDELETE setKey(java.lang.String key) {
        return (HandleDELETE) super.setKey(key);
      }

      @Override
      public HandleDELETE setOauthToken(java.lang.String oauthToken) {
        return (HandleDELETE) super.setOauthToken(oauthToken);
      }

      @Override
      public HandleDELETE setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (HandleDELETE) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public HandleDELETE setQuotaUser(java.lang.String quotaUser) {
        return (HandleDELETE) super.setQuotaUser(quotaUser);
      }

      @Override
      public HandleDELETE setUserIp(java.lang.String userIp) {
        return (HandleDELETE) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String uri;

      /**

       */
      public java.lang.String getUri() {
        return uri;
      }

      public HandleDELETE setUri(java.lang.String uri) {
        this.uri = uri;
        return this;
      }

      @Override
      public HandleDELETE set(String parameterName, Object value) {
        return (HandleDELETE) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "datastoreEndpoint.handlePUT".
     *
     * This request holds the parameters needed by the datastore server.  After setting any optional
     * parameters, call the {@link HandlePUT#execute()} method to invoke the remote operation.
     *
     * @param uri
     * @param json
     * @return the request
     */
    public HandlePUT handlePUT(java.lang.String uri, java.lang.String json) throws java.io.IOException {
      HandlePUT result = new HandlePUT(uri, json);
      initialize(result);
      return result;
    }

    public class HandlePUT extends DatastoreRequest<Void> {

      private static final String REST_PATH = "handlePUT/{uri}/{json}";

      /**
       * Create a request for the method "datastoreEndpoint.handlePUT".
       *
       * This request holds the parameters needed by the the datastore server.  After setting any
       * optional parameters, call the {@link HandlePUT#execute()} method to invoke the remote
       * operation. <p> {@link
       * HandlePUT#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param uri
       * @param json
       * @since 1.13
       */
      protected HandlePUT(java.lang.String uri, java.lang.String json) {
        super(Datastore.this, "POST", REST_PATH, null, Void.class);
        this.uri = com.google.api.client.util.Preconditions.checkNotNull(uri, "Required parameter uri must be specified.");
        this.json = com.google.api.client.util.Preconditions.checkNotNull(json, "Required parameter json must be specified.");
      }

      @Override
      public HandlePUT setAlt(java.lang.String alt) {
        return (HandlePUT) super.setAlt(alt);
      }

      @Override
      public HandlePUT setFields(java.lang.String fields) {
        return (HandlePUT) super.setFields(fields);
      }

      @Override
      public HandlePUT setKey(java.lang.String key) {
        return (HandlePUT) super.setKey(key);
      }

      @Override
      public HandlePUT setOauthToken(java.lang.String oauthToken) {
        return (HandlePUT) super.setOauthToken(oauthToken);
      }

      @Override
      public HandlePUT setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (HandlePUT) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public HandlePUT setQuotaUser(java.lang.String quotaUser) {
        return (HandlePUT) super.setQuotaUser(quotaUser);
      }

      @Override
      public HandlePUT setUserIp(java.lang.String userIp) {
        return (HandlePUT) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String uri;

      /**

       */
      public java.lang.String getUri() {
        return uri;
      }

      public HandlePUT setUri(java.lang.String uri) {
        this.uri = uri;
        return this;
      }

      @com.google.api.client.util.Key
      private java.lang.String json;

      /**

       */
      public java.lang.String getJson() {
        return json;
      }

      public HandlePUT setJson(java.lang.String json) {
        this.json = json;
        return this;
      }

      @Override
      public HandlePUT set(String parameterName, Object value) {
        return (HandlePUT) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Datastore}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Datastore}. */
    @Override
    public Datastore build() {
      return new Datastore(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link DatastoreRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setDatastoreRequestInitializer(
        DatastoreRequestInitializer datastoreRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(datastoreRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
