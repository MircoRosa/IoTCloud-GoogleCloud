/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2018-02-26 17:53:51 UTC)
 * on 2018-03-11 at 15:49:46 UTC 
 * Modify at your own risk.
 */

package com.dev.mirco.iot.backend.channel;

/**
 * Service definition for Channel (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link ChannelRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Channel extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.23.0 of the channel library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "channel/v1/";

  /**
   * The default encoded batch path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.23
   */
  public static final String DEFAULT_BATCH_PATH = "batch";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Channel(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Channel(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the ChannelEndpoint collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Channel channel = new Channel(...);}
   *   {@code Channel.ChannelEndpoint.List request = channel.channelEndpoint().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public ChannelEndpoint channelEndpoint() {
    return new ChannelEndpoint();
  }

  /**
   * The "channelEndpoint" collection of methods.
   */
  public class ChannelEndpoint {

    /**
     * Create a request for the method "channelEndpoint.createChannel".
     *
     * This request holds the parameters needed by the channel server.  After setting any optional
     * parameters, call the {@link CreateChannel#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public CreateChannel createChannel() throws java.io.IOException {
      CreateChannel result = new CreateChannel();
      initialize(result);
      return result;
    }

    public class CreateChannel extends ChannelRequest<com.dev.mirco.iot.backend.channel.model.MyToken> {

      private static final String REST_PATH = "createChannel";

      /**
       * Create a request for the method "channelEndpoint.createChannel".
       *
       * This request holds the parameters needed by the the channel server.  After setting any optional
       * parameters, call the {@link CreateChannel#execute()} method to invoke the remote operation. <p>
       * {@link CreateChannel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @since 1.13
       */
      protected CreateChannel() {
        super(Channel.this, "POST", REST_PATH, null, com.dev.mirco.iot.backend.channel.model.MyToken.class);
      }

      @Override
      public CreateChannel setAlt(java.lang.String alt) {
        return (CreateChannel) super.setAlt(alt);
      }

      @Override
      public CreateChannel setFields(java.lang.String fields) {
        return (CreateChannel) super.setFields(fields);
      }

      @Override
      public CreateChannel setKey(java.lang.String key) {
        return (CreateChannel) super.setKey(key);
      }

      @Override
      public CreateChannel setOauthToken(java.lang.String oauthToken) {
        return (CreateChannel) super.setOauthToken(oauthToken);
      }

      @Override
      public CreateChannel setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (CreateChannel) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public CreateChannel setQuotaUser(java.lang.String quotaUser) {
        return (CreateChannel) super.setQuotaUser(quotaUser);
      }

      @Override
      public CreateChannel setUserIp(java.lang.String userIp) {
        return (CreateChannel) super.setUserIp(userIp);
      }

      @Override
      public CreateChannel set(String parameterName, Object value) {
        return (CreateChannel) super.set(parameterName, value);
      }
    }
    /**
     * Create a request for the method "channelEndpoint.sendOnChannel".
     *
     * This request holds the parameters needed by the channel server.  After setting any optional
     * parameters, call the {@link SendOnChannel#execute()} method to invoke the remote operation.
     *
     * @param payload
     * @return the request
     */
    public SendOnChannel sendOnChannel(java.lang.String payload) throws java.io.IOException {
      SendOnChannel result = new SendOnChannel(payload);
      initialize(result);
      return result;
    }

    public class SendOnChannel extends ChannelRequest<Void> {

      private static final String REST_PATH = "sendOnChannel/{payload}";

      /**
       * Create a request for the method "channelEndpoint.sendOnChannel".
       *
       * This request holds the parameters needed by the the channel server.  After setting any optional
       * parameters, call the {@link SendOnChannel#execute()} method to invoke the remote operation. <p>
       * {@link SendOnChannel#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
       * equest)} must be called to initialize this instance immediately after invoking the constructor.
       * </p>
       *
       * @param payload
       * @since 1.13
       */
      protected SendOnChannel(java.lang.String payload) {
        super(Channel.this, "POST", REST_PATH, null, Void.class);
        this.payload = com.google.api.client.util.Preconditions.checkNotNull(payload, "Required parameter payload must be specified.");
      }

      @Override
      public SendOnChannel setAlt(java.lang.String alt) {
        return (SendOnChannel) super.setAlt(alt);
      }

      @Override
      public SendOnChannel setFields(java.lang.String fields) {
        return (SendOnChannel) super.setFields(fields);
      }

      @Override
      public SendOnChannel setKey(java.lang.String key) {
        return (SendOnChannel) super.setKey(key);
      }

      @Override
      public SendOnChannel setOauthToken(java.lang.String oauthToken) {
        return (SendOnChannel) super.setOauthToken(oauthToken);
      }

      @Override
      public SendOnChannel setPrettyPrint(java.lang.Boolean prettyPrint) {
        return (SendOnChannel) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public SendOnChannel setQuotaUser(java.lang.String quotaUser) {
        return (SendOnChannel) super.setQuotaUser(quotaUser);
      }

      @Override
      public SendOnChannel setUserIp(java.lang.String userIp) {
        return (SendOnChannel) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private java.lang.String payload;

      /**

       */
      public java.lang.String getPayload() {
        return payload;
      }

      public SendOnChannel setPayload(java.lang.String payload) {
        this.payload = payload;
        return this;
      }

      @Override
      public SendOnChannel set(String parameterName, Object value) {
        return (SendOnChannel) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Channel}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
      setBatchPath(DEFAULT_BATCH_PATH);
    }

    /** Builds a new instance of {@link Channel}. */
    @Override
    public Channel build() {
      return new Channel(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setBatchPath(String batchPath) {
      return (Builder) super.setBatchPath(batchPath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link ChannelRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setChannelRequestInitializer(
        ChannelRequestInitializer channelRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(channelRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
